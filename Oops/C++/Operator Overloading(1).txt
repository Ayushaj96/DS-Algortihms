#include <iostream>
using namespace std;
class Complex{
    int real;
    int img;
    
  public:
    Complex(){
        real=0;
        img=0;
    }
    
    Complex(int r,int i){
        real=r;
        img=i;
    }
    
    void setReal(const int r){
        real=r;
    }
    
    void setImag(const int i){
        img=i;
    }
    
    int getReal() const{
        return real;
    }

   int getImag() const{
        return img;
    }
    
    void print(){
        if(img>0){
            cout<<real<<" + "<<img<<"i"<<endl;
        }
        else{
            cout<<real<<" - "<<-img<<"i"<<endl;
        }
    }
    
    // void add(const Complex &x){        //x is referance variable (as in ccopy constructor)
    //     real=real+x.real;
    //     img=img+x.img;           //updating the contents of c1 object so parameters can be constant but function cant be
    // }

    //OPERATOR OVERLOADING 
    
    //1) Binary Operator
    //   if you want to store into third object then create that object and change the return type of this function
    void operator+(const Complex &x){  //we are passing object as referance as in the last one and performing + using operator keyword
        real+=x.real;
        img+=x.img;
    }
    
    //2) Unary Operator
    void operator!(){                 //unary operators do not accept anything as arguments
        img*=-1;                      //any functionality can be defined
    }
    
    //3) Square brackets
    int operator[](string s){
       // cout<<real<<" + "<<img<<s<<endl;
       if(s=="real"){
           return real;
       }
       else
         return img;
    }
};  

//4) <<,>> operators (Right shift and left shift)
void operator>>(istream& is,Complex &c){
  int r1,i1;
  is>>r1>>i1;
  c.setReal(r1);
  c.setImag(i1);
}
    
void operator<<(ostream& os,Complex &c){
  c.print();
}
    
int main() {
    Complex c1(5,3);
    Complex c2;
    c2.setReal(4);
    c2.setImag(1);
    
    c1.print();
    c2.print();
    
   // c1.add(c2);    //passing object as referance
   // c1.print();    //c1 gets changed but c2 remains same
   
   //OPERATOR OVERLOADING 
   // +
   c1+c2;            //indirectly we are doing c1.+(c2)
   c1.print();       //here also, c1 gets changed but c2 remains same
   
   // !
   !c1;
   c1.print();
   
   
   // [ ]
   //c1[" is cool"];     //c1.[]("String")
   cout<<c1["real"]<<endl;
   
   //<<,>>
   Complex c3;
   //to take c3 as argument (Complex data type) ,we hava to make changes in cin (istream type) which is not possible or good practise
   //so we make a global function which takes cin and c3 as arguments
   cin>>c3;              //cin and cout are spl objects of iostream class (istream,ostream)
   cout<<c3;
} 
