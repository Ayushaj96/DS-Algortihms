#include <iostream>
using namespace std;
class Complex{
    int real;
    int img;
    
  public:
    Complex(){
        real=0;
        img=0;
    }
    
    Complex(int r,int i){
        real=r;
        img=i;
    }
    
    void setReal(const int r){
        real=r;
    }
    
    void setImag(const int i){
        img=i;
    }
    
    int getReal() const{
        return real;
    }

   int getImag() const{
        return img;
    }
    
    void print(){
        if(img>0){
            cout<<real<<" + "<<img<<"i"<<endl;
        }
        else{
            cout<<real<<" - "<<-img<<"i"<<endl;
        }
    }
};   

//  void operator>>(istream& is,Complex &c){
//  istream& means we are not returning by copy but by referance means actual is object
// this is bcoz istream and ostream are spl objects so should make their copies
   istream& operator>>(istream& is,Complex &c){ 
        int r1,i1;
        is>>r1>>i1;
        c.setReal(r1);
        c.setImag(i1);
        return is;
    }
    
    ostream& operator<<(ostream& os,Complex &c){
        c.print();
        return os;
    }
    
int main() {
    
   //CASCADING 
   
   Complex c1,c2;
   
   //if we do this then cin>>c1 will return a void value as return type was void then void>>c2 which given no ans 
   //so change return type from void to istream
   cin>>c1>>c2; 
   cout<<c1<<c2;
  
} 
