//const
// 1) const data members
// 2) const functions
// 3) const parameters


#include <iostream>
#include<cstring>
using namespace std;
class car{
    private :
     int price;
    public:
     int model;
    // char name[20];
    char *name;
     const int tyres;   //can be read but ca't be override
     
     //before entering the budy of constructor ,memory is created so we initialized at that time. After entering ,we just initialize them
     
     //in constructor ,we do assignment and tyres are const so we can't assign them, we have to initialize them
     car():tyres(4){                         //initialization
         //override the default constructor
         //first function called automatically when object is created
         cout<<"This is my car class"<<endl;
         name=NULL;
     }
     
     //parameterized constructor
     car(int p,int m,char *nm,int t=4):tyres(t){
         price=p;
         model=m;
         int l=strlen(nm);
         name=new car[l+1];     //creating a dynamic character array and storing the address(pointer) of this array in the bucket instead of whole array
         strcpy(name,nm);
     }
     
     //overriding copy constructor
     car(car &x):tyres(x.tyres){                 //x is the direct object that is being passed(pass by referance) as if we pass 
                                  //value only then it calla copy which itself call copy constructor and cycle continues
                                  //so to break cycle ,referance is passed     
         price=x.price;
         model=x.model;
         strcpy(name,x.name);
     }
     
     void print() const{                //const function do not update data members,help in debugging 
         cout<<endl;
         cout<<price<<endl;
         cout<<model<<endl;
         cout<<name<<endl;
     }
     //memory allocated to function only once but memory is allocated to variables again and again acc to objct
     void start(){                  
         cout<<"Car started";
     }
     
     void setName(char *n){        //pointer to read only string
         if(name==NULL){
             name=new char[strlen(n)+1];      //allocating the memory
             strcpy(name,n);
         }
     }
     
     void setPrice(const int p){ //as p is not changing in this function
        if(price>0){
            price=p;          
        }
        else{
            price=0;
        }
     }
     
     int getPrice(){
         return price;
     }
};
int main() {
    car c;
    c.model=1001;
    // c.name[0]='B';          //for static
    // c.name[1]='M';
    // c.name[2]='W';
    // c.name[3]='\0';
    
    c.setName("Ferrari");     //for dynamic 
    
    c.setPrice(1000);
    cout<<c.getPrice()<<endl;
    cout<<c.name<<endl<<c.model;
    
    car c1(10,20,"AUDI");
    c1.print();
    
    //copy constructor is to create a copy of given object of the same type
    //it exist by default
    
    //PASS BY VALUE
    //car c2=c1;      (method2)
    //car c2(c1);     (method1)
    
    //PASS BY REFERANCE
    car c2(c1);    
    c1.print();
}
