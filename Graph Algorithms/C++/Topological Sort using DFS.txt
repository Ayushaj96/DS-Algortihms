#include <iostream>
#include <map>
#include <list>
using namespace std;

template<typename T>
class Graph{
    map<T,list<T> > adjlist;

    public:
     Graph(){}

     void addEdge(T u,T v,bool birec=true){
         adjlist[u].push_back(v);
         if(birec){
             adjlist[v].push_back(u);
         }
     }

     void dfshelper(T node, map<T,bool> &visited, list<T> &ordering){
          visited[node] = true;
          for(auto neighbour:adjlist[node]){
              if(!visited[neighbour]){
                  dfshelper(neighbour,visited,ordering);
              }
          }

          //add only 1 line for TS
          //At this point, all the children of current node have beem visited
          //so we can add current node to the list
          ordering.push_front(node);
     }

     void dfs(){
       map<T,bool> visited;
       list<T> ordering;

       for(auto i:adjlist){
           // i is a pair (node,list of nodes)
           T node = i.first;
           if(!visited[node]){
               dfshelper(node,visited,ordering);
           }
        }

        //print all the elements in ordering
        for(auto element : ordering){
         cout<<element<<" --> ";
       }
     }

};

int main() {
    Graph<string> g;
    g.addEdge("English","Programming Logic",false);
    g.addEdge("Maths","Programming Logic",false);
    g.addEdge("Programming Logic","HTML",false);
    g.addEdge("Programming Logic","Python",false);
    g.addEdge("Programming Logic","Java",false);
    g.addEdge("Programming Logic","JS",false);
    g.addEdge("Python","Web Dev",false);
    g.addEdge("HTML","CSS",false);
    g.addEdge("CSS","JS",false);
    g.addEdge("JS","Web Dev",false);
    g.addEdge("Java","Web Dev",false);
    g.addEdge("Python","Web Dev",false);
    g.dfs();
    return 0;
}
