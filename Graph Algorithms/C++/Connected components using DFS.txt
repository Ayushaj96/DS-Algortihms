#include <iostream>
#include <map>
#include <list>
using namespace std;

template<typename T>
class Graph{
    map<T,list<T> > adjlist;

    public:
     Graph(){}

     void addEdge(T u,T v,bool birec=true){
         adjlist[u].push_back(v);
         if(birec){
             adjlist[v].push_back(u);
         }
     }

     void dfshelper(T node,map<T,bool> &visited){
          visited[node] = true;
          cout<<node<<" ";

          for(auto neighbour:adjlist[node]){
              if(!visited[neighbour]){
                  visited[neighbour] = true;
                  dfshelper(neighbour,visited);
              }
          }
     }

     void dfs(T src){
         map<T,bool> visited;
         int component = 1;
         dfshelper(src,visited);
         cout<<endl;

         for(auto i : adjlist){
             T city = i.first;
             if(!visited[city]){
                 dfshelper(city,visited);
                 component++;
             }
         }
         cout<<"\nThe current graph has "<<component<<" components";
     }
};

int main() {
    Graph<string> g;
    g.addEdge("Amritsar","Delhi");
    g.addEdge("Amritsar","Jaipur");
    g.addEdge("Delhi","Jaipur");
    g.addEdge("Jaipur","Mumbai");
    g.addEdge("Delhi","Bhopal");
    g.addEdge("Bhopal","Mumbai");
    g.addEdge("Mumbai","Bangalore");
    g.addEdge("Andaman","Nicobar");

    g.dfs("Amritsar");
    return 0;
}
