#include <iostream>
#include <map>
#include <queue>
#include <list>
using namespace std;
template <typename T>
class Graph{
  map<T,list<T> > adjList;
  public:
  Graph() {}

  void addEdge(T u, T v, bool bidirec=true){
       adjList[u].push_back(v);
       if(bidirec){
           adjList[v].push_back(u); 
       }
  }

  bool isCyclicHelper(T node, map<T,bool> &visited, map<T,bool> &instack){

      // processes the current node - visited, instack
      visited[node] = true;
      instack[node] = true;

      // explore the neighbours of node
      for(auto neighbour: adjList[node]){

          // two things happen
          // node is not visited and its further branch is leading it to a cycle
          if(!visited[neighbour] && isCyclicHelper(neighbour,visited,instack) || instack[neighbour]){
              return true;
          }
      }

      // going to pop out from the stack, i.e. instack = false;
      instack[node] = false;
      return false;
  }

  bool isCyclic(T src){
      map<T,bool> visited;
      map<T,bool> instack;

      for(auto i:adjList){
          T node = i.first;
          if(!visited[node]){
              bool cyclePresent = isCyclicHelper(node, visited, instack);
              if(cyclePresent)
                return true;
          }
      }
      return false;
  }

};
int main() {
    Graph<int> g;
    g.addEdge(0,2,false);
    g.addEdge(0,1,false);
    g.addEdge(2,3,false);
    g.addEdge(2,4,false);
    g.addEdge(3,0,false);
    g.addEdge(4,5,false);
    g.addEdge(1,5,false);

    if(g.isCyclic(1)){
        cout<<"Graph is cyclic";
    }
    else{
        cout<<"Graph is non-cyclic";
    }
    return 0;
}
