#include <iostream>
#include <list>
using namespace std;
class Graph{
    int v;
    list<pair<int,int> > *adjlist;
    
    public:
    Graph(int V){
        v = V;
        adjlist = new list<pair<int,int> > [v];
    }

    void addEdge(int u, int v, int cost, bool bidir=true){
        adjlist[u].push_back(make_pair(v,cost));
        if(bidir){
            adjlist[v].push_back(make_pair(u,cost));
        }
    }

    //return size of subtree
    int dfshelper(int node, bool *visited, int *count, int &ans){
        visited[node] = true;
        count[node] = 1;

        //you have to recursively find out the size of its children/neighbour
        for(auto neighbour: adjlist[node]){         
            int V = neighbour.first;            //since at every index, there is a pair
            if(!visited[V]){
                count[node] = count[node] + dfshelper(V,visited,count,ans);

                int size = count[V];
                int n = v;
                int edgecost = neighbour.second;
                ans += 2*min(size,n-size)*edgecost;
            }
        }
        return count[node];
    }

    void holidfs(){
        bool *visited = new bool[v]{0};
        int *count = new int[v]{0};
        int ans = 0;
        dfshelper(0, visited, count, ans);
        // for(int i=0;i<v;i++){
        //     cout<<count[i]<<" ";
        // }
        cout<<ans;
    }
};

int main() {
    Graph g(4);
    g.addEdge(0,1,3);
    g.addEdge(1,2,2);
    g.addEdge(3,2,2);
    g.holidfs();
    return 0;
}
