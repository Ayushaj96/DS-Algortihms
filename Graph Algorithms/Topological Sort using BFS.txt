#include <iostream>
#include <map>
#include <list>
#include <queue>
using namespace std;

template<typename T>
class Graph{
    map<T,list<T> > adjlist;

    public:
     Graph(){}

     void addEdge(T u,T v,bool birec=true){
         adjlist[u].push_back(v);
         if(birec){
             adjlist[v].push_back(u);
         }
     }

     void bfsTopologicalSort(){
       map<T,bool> visited;
       queue<T> q;
       map<T,int> indegree;

       for(auto i :adjlist){
           T node = i.first;
           visited[node] = false;
           indegree[node] = 0;
       }
       
       for(auto i:adjlist){
         T u = i.first;
         for(auto v: adjlist[u]){
              indegree[v]++;
         } 
       }

       for(auto i : adjlist){
           T node = i.first;
           if(indegree[node]==0){
               q.push(node);
           }
       }

       while(!q.empty()){
           T node = q.front();
           cout<<node<<" -> ";
           q.pop();
           for(auto neighbour : adjlist[node]){
               indegree[neighbour]--;
               if(indegree[neighbour]==0){
                   q.push(neighbour);
               }
           }
       }
     }
};

int main() {
    Graph<string> g;
    g.addEdge("English","Programming Logic",false);
    g.addEdge("Maths","Programming Logic",false);
    g.addEdge("Programming Logic","HTML",false);
    g.addEdge("Programming Logic","Python",false);
    g.addEdge("Programming Logic","Java",false);
    g.addEdge("Programming Logic","JS",false);
    g.addEdge("Python","Web Dev",false);
    g.addEdge("HTML","CSS",false);
    g.addEdge("CSS","JS",false);
    g.addEdge("JS","Web Dev",false);
    g.addEdge("Java","Web Dev",false);
    g.addEdge("Python","Web Dev",false);
    g.bfsTopologicalSort();
    return 0;
}
