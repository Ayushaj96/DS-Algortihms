#include <iostream>
using namespace std;
class node{
    public:
    int data;
    node *next;
    
    node(int d){
        data=d;
        next=NULL;
    }
};

void insertAtEnd(node *&head,int data){
    if(head==NULL){
        head=new node(data);
		return;
    }
    
    node *tail=head;
    while(tail->next!=NULL){
        tail=tail->next;
    }
    
    node *n=new node(data);
    n->next=NULL;
    tail->next=n;
     return;   
}

void buildNodes(node *&head,int n){
    int data;
 
    while(n!=0){
        cin>>data;
        insertAtEnd(head,data);
        n--;
    }
}

void print(node *head){           
    node *temp=head;
    
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

node*midpoint(node *head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    
    node *slow = head;
    node *fast = head->next;
    
    while(fast!=NULL && fast->next!=NULL){
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

node *merge(node *a,node *b){
    if(a==NULL){
        return b;
    }
    else if(b==NULL){
        return a;
    }
    
    node *c;
    if(a->data < b->data){
        c=a;
        c->next=merge(a->next,b);
    }
    else{
        c=b;
        c->next=merge(a,b->next);
    }
    return c;
}

node *mergesort(node *head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    
    node *mid=midpoint(head);
    node *a=head;
    node *b=mid->next;
    mid->next=NULL;
    
    a=mergesort(a);
    b=mergesort(b);
    
    node *c=merge(a,b);
    return c;
}

int main() {
    node *head=NULL;
    node *head2=NULL;
    int n1;
     
    cin>>n1;
    buildNodes(head,n1);
    
    head=mergesort(head);
    print(head);
    
    return 0;
}
