#include <iostream>
#include<queue>
using namespace std;
class node{
   public:
    int data;
    node *left;
    node *right;

    node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};

int search(int *a,int s,int n,int key){
    int i;
    for(i=s;i<=n;i++){
        if(a[i]==key){
            break;
        }
    }
    return i;
}

node *buildTree(int *inorder , int *postorder , int start , int end ,int *n){
  if(start>end){
      return NULL;
  }
  node *root=new node(postorder[*n]);
  (*n)--;

  if(start==end){
      return root;
  }
  int pos=search(inorder , start, end , root->data);
  
  root->right=buildTree(inorder , postorder , pos+1 , end , n);
  root->left=buildTree(inorder , postorder , start , pos-1 , n);
  
  return root;
}

void printPreorder(node *root){
    if(root==NULL){
        return;
    }

    cout<<root->data<<" ";
     printPreorder(root->left);
    printPreorder(root->right);
}

int main() {
    
    int t;
    cin>>t;

    for(int i=0;i<t;i++){
    node *root=NULL;
    int n;

    cin>>n;
    int inorder[n],postorder[n];

    for(int i=0;i<n;i++){
        cin>>inorder[i];
    }
    for(int i=0;i<n;i++){
        cin>>postorder[i];
    }
    int pindex=n-1;
    root=buildTree(inorder,postorder,0,n-1,&pindex);
    printPreorder(root);
    cout<<endl;
    }
    return 0;
}

