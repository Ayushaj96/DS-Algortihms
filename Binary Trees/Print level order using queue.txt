#include <iostream>
#include<queue>
using namespace std;
class node{

   public:
    int data;
    node *left;
    node *right;

    node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};

node *buildTree(){
  int data;
  cin>>data;

  if(data==-1){
      return NULL;
  }

  node *n=new node(data);
  n->left=buildTree();
  n->right=buildTree();
  return n;
}

// void printPreorder(node *root){
//     if(root==NULL){
//         return;
//     }

//     cout<<root->data<<" , ";
//     printPreorder(root->left);
//     printPreorder(root->right);
// }

void levelOrderPrint(node *root){
    queue<node *> q;
    q.push(root);
    
        
    while(!q.empty()){
        node *f=q.front();
        q.pop();
        cout<<f->data<<" ";

        if(f->left){
            q.push(f->left);
        }

        if(f->right){
            q.push(f->right);
        }
    }
}

void levelOrderPrintwithendl(node *root){
    queue<node *> q;
    q.push(root);
    q.push(NULL);
        
    while(!q.empty()){
        node *f=q.front();

        if(f==NULL){
         q.pop();
         cout<<endl;
          if(!q.empty()){
              q.push(NULL);
          }
        }
        else{
          q.pop();
          cout<<f->data<<" ";
 
          if(f->left){
            q.push(f->left);
          }

          if(f->right){
            q.push(f->right);
          }
        }
    }
}
int main() {
    
    node *root=NULL;
    root=buildTree();
//    printPreorder(root);

   cout<<"\n Level order print \n";
   levelOrderPrint(root);

   cout<<"\n Level order print With newline\n";
   levelOrderPrintwithendl(root);
    return 0;
}

