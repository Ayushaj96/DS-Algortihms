#include <iostream>
#include <cstring>
#define MOD 1000000007
using namespace std;
int dp[100][100];

int numWays(int rows,int columns){
    if(dp[0][0]==-1){
        return 0;
    }
    
    //fill first row if path is not blocked
    for(int i=0;i<columns;i++){
        if(dp[0][i]==-1){
            break;
        }
        dp[0][i] = 1;
    }
    //fill first column if path is not blocked
     for(int i=0;i<rows;i++){
        if(dp[i][0]==-1){
            break;
        }
        dp[i][0] = 1;
    }

    for(int i=1;i<rows;i++){
        for(int j=1;j<columns;j++){

            //if cell is blocked then leave it
            if(dp[i][j]==-1){
                continue;
            }
            dp[i][j] = 0;
            if(dp[i][j-1]!=-1){
                dp[i][j] = dp[i][j-1]%MOD;
            }
            if(dp[i-1][j]!=-1){
                dp[i][j] = (dp[i][j] + dp[i-1][j])% MOD;
            }
        }
    }

    if(dp[rows-1][columns-1]==-1){
        return -1;
    }
    
    for(int i=0;i<rows;i++){
        for(int j=0;j<columns;j++){
            cout<<dp[i][j]<<" ";
        }
        cout<<endl;
    }
    return dp[rows-1][columns-1];

}

int main() {
    memset(dp,0,sizeof(dp));
    
    int M,N,P;              // M = no of rows , N = no of columns , P = no of blocked states
    cin>>M>>N>>P;

    for(int i=0;i<P;i++){
         int X,Y;
         cin>>X>>Y;
         dp[X-1][Y-1] = -1;       //assigning blocked states
    }
    cout<<numWays(M,N)<<endl;
}

