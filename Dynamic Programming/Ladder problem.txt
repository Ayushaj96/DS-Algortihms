#include <iostream>
using namespace std;

//if only recursion - (k power n)
//memoization
int memo[100];
int ladder(int n,int k){
    if(n==0){
        return 1;
    }
    if(n<0){
        return 0;
    }

    if(memo[n]!=-1) return memo[n];

    //memo[n] = ladder(n-1) + ladder(n-2) + ladder(n-3);
    int ans=0;
    for(int j=1;j<=k;j++){
      ans = ans + ladder(n-j,k);
    }
    memo[n]=ans;
    return memo[n];
}

//bottom-up
//time - O(kn)
int ladderdp(int n,int k){
    int *dp = new int[n];

    dp[0]=1;
    
    for(int i=1;i<=n;i++){
        dp[i] = 0;
        for(int j=1;j<=k;j++){
            if((i-j)>=0){
               dp[i] = dp[i] + dp[i-j];
            } 
        }
    }
    return dp[n];
}

//time - O(n)
int ladderOptimized(int n,int k){
    int *dp = new int[n];
    dp[0] = 1;
    // dp[1] = 1;
    // dp[2] = 2;
    // dp[3] = 4;
    for(int i=1;i<=k;i++){
        dp[i] = 0;
        for(int j=1;j<=k;j++){
            if((i-j)>=0){
               dp[i] = dp[i] + dp[i-j];
            } 
        }
    }

    for(int i=k+1;i<=n;i++){
        dp[i] = 0;
        dp[i] = (2 * dp[i-1]) - dp[i-k-1];
    }
    return dp[n];
}
int main() {
    int n,k;
    cin>>n>>k;
    
    //memoization
    fill(memo,memo+n+1,-1);
    cout<<ladder(n,k);
    cout<<endl;

    //bottom-up
    cout<<ladderdp(n,k);
    cout<<endl;

    //optimized
    cout<<ladderOptimized(n,k);
}
