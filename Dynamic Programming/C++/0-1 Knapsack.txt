#include <iostream>
#include <cstring>
using namespace std;
int memo[100][100];
int knapsack(int wts[],int prices[],int n,int w){
    if(n==0 || w==0){
        return 0;
    }

    int inc=0,exc=0;
    
    if(memo[n][w]!=-1) return memo[n][w];
    //including current item
    if(wts[n-1]<=w){
       // inc = prices[n-1] + knapsack(wts,prices,n-1,w-wts[n-1]);
       inc = prices[n-1] + knapsack(wts,prices,n,w-wts[n-1]);                 //if same item can be included many times
    }
    //excluding current item
    exc = 0 + knapsack(wts,prices,n-1,w);
    memo[n][w] = max(inc,exc);
    return memo[n][w];
}

int knapsackDp(int wts[],int prices[],int N,int W){
    int dp[100][100] = {0};

    for(int i=0;i<=N;i++){
        for(int w=0;w<=W;w++){
            if(i==0 || w==0){
                dp[i][w]=0;
            }
            else{
                int inc=0;int exc=0;
                if(wts[i-1]<=w){
                //inc = prices[i-1] + dp[i-1][w-wts[i-1]];
                  inc = prices[i-1] + dp[i][w-wts[i-1]];                    //if same item can be included many times
                }
                 exc = dp[i-1][w];
                 dp[i][w] = max(inc,exc);
            }
        }
    }
    return dp[N][W];
}
int main() {
    int wts[] = {2,2,3,1};
    int prices[] = {5,20,100,30};
    int N = 4;
    int W = 5;
  
    //memoization
    memset(memo,-1,sizeof(memo));
    int maxprofit = knapsack(wts,prices,N,W);
    cout<<maxprofit<<endl;

    //bottom-up
    cout<<knapsackDp(wts,prices,N,W);
}
