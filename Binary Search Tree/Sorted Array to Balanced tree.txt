#include <bits/stdc++.h>
using namespace std;
class node{

   public:
    int data;
    node *left;
    node *right;

    node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};

node *BalancedBST(int *a,int start,int end){
    if(start>end){
        return NULL;
    }

    int mid=(start+end)/2;
    node *root=new node(a[mid]);  //mid value of sorted array becomes root
    root->left=BalancedBST(a,start,mid-1);
    root->right=BalancedBST(a,mid+1,end);
    return root;
}

// PRINT LEVEL ORDER
void levelOrderPrint(node *root){
    queue<node *> q;
    q.push(root);
    q.push(NULL);
        
    while(!q.empty()){
        node *f=q.front();

        if(f==NULL){
         q.pop();
         cout<<endl;
          if(!q.empty()){
              q.push(NULL);
          }
        }
        else{
          q.pop();
          cout<<f->data<<" ";
 
          if(f->left){
            q.push(f->left);
          }

          if(f->right){
            q.push(f->right);
          }
        }
    }
}

int main() {
    
    int a[]={1,2,4,5,6,7,8};
    node *root=NULL;
    int n=sizeof(a)/sizeof(a[0]);
    root=BalancedBST(a,0,n-1);
    cout<<"Print Level Order \n";
    levelOrderPrint(root);
    return 0;
}



