#include <bits/stdc++.h>
using namespace std;
class node{

   public:
    int data;
    node *left;
    node *right;

    node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};

node *BalancedBST(int *a,int start,int end){
    if(start>end){
        return NULL;
    }

    int mid=(start+end)/2;
    node *root=new node(a[mid]);  //mid value of sorted array becomes root
    root->left=BalancedBST(a,start,mid-1);
    root->right=BalancedBST(a,mid+1,end);
    return root;
}

//TOP DOWN APPROACH
bool isBST(node *root,int min=INT_MIN,int max=INT_MAX){
    if(root==NULL){
        return true;
    }
    
    if(root->data>=min && root->data<max && isBST(root->left,min,root->data) && isBST(root->right,root->data,max)){
        return true;
    }
    return false;
}


int main() {
    
    int a[]={1,2,4,15,6,7,8};
    node *root=NULL;
    int n=sizeof(a)/sizeof(a[0]);
    root=BalancedBST(a,0,n-1);
    if(isBST(root)){
        cout<<"Yes, given tree is BST";
    }
    else{
        cout<<"No, given tree is not BST";
    }
 
    return 0;
}




