#include <bits/stdc++.h>
using namespace std;
class node{

   public:
    int data;
    node *left;
    node *right;

    node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};

class LinkedList{
    public:
    node *head;
    node *tail;
};

node *BalancedBST(int *a,int start,int end){
    if(start>end){
        return NULL;
    }

    int mid=(start+end)/2;
    node *root=new node(a[mid]);  //mid value of sorted array becomes root
    root->left=BalancedBST(a,start,mid-1);
    root->right=BalancedBST(a,mid+1,end);
    return root;
}

LinkedList treetoLL(node *root){
    LinkedList l;
    if(root==NULL){
        l.head=l.tail=NULL;
        return l;
    }

    if(root->right==NULL && root->left==NULL){
        l.head=root;
        l.tail=root;
        
    }
    else if(root->left!=NULL && root->right==NULL){
        LinkedList left=treetoLL(root->left);
        left.tail->right=root;
        l.head=left.head;
        l.tail=root;
    }
     else if(root->left==NULL && root->right!=NULL){
        LinkedList right=treetoLL(root->right);
        root->right=right.head;
        l.head=root;
        l.tail=right.tail;
     }
     else{
         LinkedList left=treetoLL(root->left);
         LinkedList right=treetoLL(root->right);
         left.tail->right=root;
         root->right=right.head;
         l.head=left.head;
         l.tail=right.tail;
     }
     return l;
}


int main() {
    
    int a[]={1,2,4,5,6,7,8};
    node *root=NULL;
    int n=sizeof(a)/sizeof(a[0]);
    root=BalancedBST(a,0,n-1);
    
    LinkedList ll=treetoLL(root);
    node *temp=ll.head;

    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->right;
    }
    cout<<"NULL"<<endl;
    return 0;
}




