#include <bits/stdc++.h>
using namespace std;
class node{

   public:
    int data;
    node *left;
    node *right;

    node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};

class myPair{
    public:
    int height;
    bool balanced;
};

//BUILDS BINARY SEARCH TREE
node *insertInBST(node *root,int data){
    if(root==NULL){
        root=new node(data);
        return root;
    }

    if(data>root->data){
        root->right=insertInBST(root->right,data);
    }
    else{
        root->left=insertInBST(root->left,data);
    }
    return root;
}
void buildTree(node *&root){
  int data;
  cin>>data;
  while(data!=-1){
      root=insertInBST(root,data);
      cin>>data;
  }
}

// PRINT LEVEL ORDER
void levelOrderPrint(node *root){
    queue<node *> q;
    q.push(root);
    q.push(NULL);
        
    while(!q.empty()){
        node *f=q.front();

        if(f==NULL){
         q.pop();
         cout<<endl;
          if(!q.empty()){
              q.push(NULL);
          }
        }
        else{
          q.pop();
          cout<<f->data<<" ";
 
          if(f->left){
            q.push(f->left);
          }

          if(f->right){
            q.push(f->right);
          }
        }
    }
}

ostream& operator <<(ostream &os,node *root){
    levelOrderPrint(root);
    return os;
}

istream& operator >>(istream &is,node *&root){
    buildTree(root);
    return is;
}

//HEIGHT-BALANCED OR NOT
myPair isBalanced(node *root){
    myPair p;

    if(root==NULL){
       p.height=0;
       p.balanced=true;
       return p;
    }

    myPair left=isBalanced(root->left);
    myPair right=isBalanced(root->right);

    int diff=abs(left.height-right.height);
    if(diff<=1 && left.balanced==true && right.balanced==true){
        p.balanced=true;
    }
    else{
        p.balanced=false;
    }

    p.height=max(left.height,right.height)+1;
    return p;
}
int main() {
    
    node *root=NULL;
    cin>>root;
    cout<<root;

     if(isBalanced(root).balanced){
         cout<<"Balanced";
     }
     else{
         cout<<"Not Balanced";
     }
    return 0;
}

