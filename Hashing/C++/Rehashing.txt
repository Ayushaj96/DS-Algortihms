#include <iostream>
#include <cstring>
using namespace std;
template<typename T>
class node{
    public:
     string key;
     T value;
     node<T> *next;

     node(string k,T v){
         key=k;
         value=v;
     }

     ~node(){                             //recursive destructor call
         if(next!=NULL){
             delete next;
         }
     }
};

template<typename T>
class Hashtable{
    int cs;
    int ts;
    node<T> **buckets;

    void rehash(){
        node<T> **oldbucket=buckets;    
        int oldts=ts;
        ts=2*ts;
        cs=0;
        buckets=new node<T> *[ts];
        for(int i=0;i<ts;i++){
            buckets[i]=NULL;
        }

        for(int i=0;i<oldts;i++){
            node<T> *temp=oldbucket[i];

            if(temp!=NULL){
                while(temp!=NULL){
                insert(temp->key,temp->value);
                temp=temp->next;
                }      
                //delete each row from old bucket
                delete oldbucket[i];      
            }
        }
        delete [] oldbucket;                //frees dynamic hashtable array pointed to by oldbucket
    }
    int hashfunc(string key){
        int L=key.length();
        int ans=0;
        int p=1;                     //because 37^0 = 1

        for(int i=0;i<L;i++){
            ans=ans+key[L-i-1]*p;
            p=p*37;
            p=p%ts;                  //this is done to reduce the size of p
            ans=ans%ts;              //this is done to reduce the size of ans
          }
          return ans;
    }

    public:
    Hashtable(int ds=7){
       cs=0;
       ts=ds;
       buckets=new node<T> *[ts];

       for(int i=0;i<ts;i++){
           buckets[i]=NULL;
       }
    }

    void insert(string key,T value){
          int i = hashfunc(key);

          //insertion at beginning
          node<T> *n=new node<T>(key,value);
          n->next=buckets[i];
          buckets[i]=n;

          cs++;
          float loadfactor=(float)cs/ts;
          if(loadfactor>0.7){
              rehash();
          }
    }

    void print(){
        for(int i=0;i<ts;i++){
            node<T> *temp=buckets[i];
            cout<<"Bucket "<<i<<" -> ";
            while(temp!=NULL){
                cout<<temp->key<<","<<temp->value<<" || ";
                temp=temp->next;
            }
            cout<<endl;
        }
    }
};
int main() {
    Hashtable<int> h(7);
    h.insert("Mango",100);
    h.insert("Apple",170);
    h.insert("Guava",140);
    h.insert("Banana",130);
    h.insert("Chiku",120);
   
    h.print();
    return 0;
}
